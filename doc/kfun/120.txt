
----------------------------------------------------------------------------
 120 clone         - create a child process
----------------------------------------------------------------------------

   mov  eax,120
   mov	ebx,flags
   mov	ecx,child_stack   ;if zero stack assigned
   mov  edx,regs          ;ptr to pt_regs structure - or NULL
   mov	esi,parent_tidptr ;ptr to child thread id
   mov	edi,child_tidptr  ;ptr to parent thread id
   int  80h


       Unlike fork, this call allow the child process to share parts of
       its  execution  context with the calling process, such as the memory
       space, the table of file descriptors, and the table of signal handlers.
       (Note that on this manual page, "calling process" normally corresponds
       to "parent process". But see the description of CLONE_PARENT below.)

       The main use of clone is to implement threads: multiple threads of con-
       trol in a program that run concurrently in a shared memory space.

       The sys_clone system call corresponds more closely to fork in that
       execution  in  the  child  continues from the point of the call. Thus,
       sys_clone only requires the flags and child_stack arguments

       the child_stack  argument  may
       be  zero,  in  which case copy-on-write semantics ensure that the child
       gets separate copies of stack pages when either  process  modifies  the
       stack.  In this case, for correct operation, the CLONE_VM option should
       not be specified.

flags
-----

    The man pages define following for flags:

                    CLONE_VM        memory identity
                    CLONE_FS        file system identity
                    CLONE_FILES     files access identity
                    CLONE_SIGHAND   signals handlers identity
                    CLONE_PID       process id identity
                    CLONE_PTRACE    ptrace continuation into clone
                    CLONE_VFORK     wait until clone's mm_release
                    CSIGNAL         mask for signal to send on exit (0x0ff)

     The include file sched.h has the following entries:

        CSIGNAL		0x000000ff	/* signal mask to be sent at exit */
        CLONE_VM	0x00000100	/* set if VM shared between processes */
        CLONE_FS	0x00000200	/* set if fs info shared between processes */
        CLONE_FILES	0x00000400	/* set if open files shared between processes */
        CLONE_SIGHAND	0x00000800	/* set if signal handlers and blocked signals shared */
        CLONE_PTRACE	0x00002000	/* set if we want to let tracing continue on the child too */
        CLONE_VFORK	0x00004000	/* set if the parent wants the child to wake it up on mm_release */
        CLONE_PARENT	0x00008000	/* set if we want to have the same parent as the cloner */
        CLONE_THREAD	0x00010000	/* Same thread group? */
        CLONE_NEWNS	0x00020000	/* New namespace group? */
        CLONE_SYSVSEM	0x00040000	/* share system V SEM_UNDO semantics */
        CLONE_SETTLS	0x00080000	/* create a new TLS for the child */
        CLONE_PARENT_SETTID	0x00100000	/* set the TID in the parent */
        CLONE_CHILD_CLEARTID	0x00200000	/* clear the TID in the child */
        CLONE_DETACHED		0x00400000	/* Unused, ignored */
        CLONE_UNTRACED		0x00800000	/* set if the tracing process can't force CLONE_PTRACE on this clone */
        CLONE_CHILD_SETTID	0x01000000	/* set the TID in the child */
        CLONE_STOPPED		0x02000000	/* Start in stopped state */

       The low byte of flags contains the number of the  signal  sent  to  the
       parent  when  the  child dies.  If this signal is specified as anything
       other than SIGCHLD, then the parent process must specify the __WALL  or
       __WCLONE options when waiting for the child with wait(2).  If no signal
       is specified, then the parent process is not signaled  when  the  child
       terminates.

       flags  may  also  be bitwise-or'ed with one or several of the following
       constants, in order to specify  what  is  shared  between  the  calling
       process and the child process:

       CSIGNAL (0ffh mask)
              the value 1-0ffh will be signal sent when process exits.  Often
              this is set to 11h for child stopped.

       CLONE_PARENT (0x8000)
              (Linux  2.4  onwards) If CLONE_PARENT is set, then the parent of
              the new child (as returned by getppid(2)) will be  the  same  as
              that of the calling process.

              If  CLONE_PARENT  is not set, then (as with fork(2)) the child's
              parent is the calling process.

              Note that it is the parent process, as returned  by  getppid(2),
              which  is  signaled  when  the  child  terminates,  so  that  if
              CLONE_PARENT is set, then the parent  of  the  calling  process,
              rather than the calling process itself, will be signaled.


       CLONE_FS (0x200)
              If CLONE_FS is set, the caller and the child processes share the
              same file system information.  This includes  the  root  of  the
              file  system, the current working directory, and the umask.  Any
              call to chroot(2), chdir(2), or umask(2) performed by the  call-
              ing  process or the child process also takes effect in the other
              process.

              If CLONE_FS is not set, the child process works on a copy of the
              file  system  information  of the calling process at the time of
              the clone call.  Calls to  chroot(2),  chdir(2),  umask(2)  per-
              formed  later  by  one  of the processes do not affect the other
              process.


       CLONE_FILES (0x400)
              If CLONE_FILES is set, the calling process and  the  child  pro-
              cesses  share  the same file descriptor table.  File descriptors
              always refer to the same files in the calling process and in the
              child  process.   Any  file  descriptor  created  by the calling
              process or by the child process  is  also  valid  in  the  other
              process.   Similarly,  if  one  of  the  processes closes a file
              descriptor, or changes its associated flags, the  other  process
              is also affected.

              If  CLONE_FILES is not set, the child process inherits a copy of
              all file descriptors opened in the calling process at  the  time
              of  clone.   Operations  on  file descriptors performed later by
              either the calling process or the child process  do  not  affect
              the other process.


       CLONE_NEWNS (0x20000)
              (Linux 2.4.19 onwards) Start the child in a new namespace.

              Every  process  lives in a namespace. The namespace of a process
              is the data (the set of mounts) describing the file hierarchy as
              seen  by  that  process.  After  a fork(2) or clone(2) where the
              CLONE_NEWNS flag is not set, the child lives in the same  names-
              pace  as  the  parent.   The system calls mount(2) and umount(2)
              change the namespace of the calling process,  and  hence  affect
              all processes that live in the same namespace, but do not affect
              processes in a different namespace.

              After a clone(2) where the CLONE_NEWNS flag is set,  the  cloned
              child  is started in a new namespace, initialized with a copy of
              the namespace of the parent.

              Only a privileged process may specify the CLONE_NEWNS flag.   It
              is not permitted to specify both CLONE_NEWNS and CLONE_FS in the
              same clone call.


       CLONE_SIGHAND (0x800)
              If CLONE_SIGHAND is set, the calling process and the child  pro-
              cesses  share the same table of signal handlers.  If the calling
              process or child process calls sigaction(2) to change the behav-
              ior  associated  with  a  signal, the behavior is changed in the
              other process as well.  However, the calling process  and  child
              processes  still  have distinct signal masks and sets of pending
              signals.  So, one of them may  block  or  unblock  some  signals
              using sigprocmask(2) without affecting the other process.

              If  CLONE_SIGHAND  is not set, the child process inherits a copy
              of the signal handlers of the calling process at the time  clone
              is  called.  Calls to sigaction(2) performed later by one of the
              processes have no effect on the other process.


       CLONE_PTRACE (0x2000)
              If CLONE_PTRACE is specified, and the calling process  is  being
              traced, then trace the child also (see ptrace(2)).


       CLONE_VFORK (0x4000)
              If  CLONE_VFORK  is set, the execution of the calling process is
              suspended until the child releases its virtual memory  resources
              via a call to execve(2) or _exit(2) (as with vfork(2)).

              If  CLONE_VFORK is not set then both the calling process and the
              child are schedulable after the call, and an application  should
              not rely on execution occurring in any particular order.


       CLONE_VM (0x100)
              If  CLONE_VM is set, the calling process and the child processes
              run in the same memory space.  In particular, memory writes per-
              formed  by  the calling process or by the child process are also
              visible in the other process.  Moreover, any memory  mapping  or
              unmapping  performed  with  mmap(2) or munmap(2) by the child or
              calling process also affects the other process.

              If CLONE_VM is not set, the child process  runs  in  a  separate
              copy  of  the memory space of the calling process at the time of
              clone.  Memory writes or file mappings/unmappings  performed  by
              one of the processes do not affect the other, as with fork(2).


       CLONE_PID
              (Obsolete)  If  CLONE_PID  is  set, the child process is created
              with the same process ID as the calling process.  This  is  good
              for  hacking  the  system,  but otherwise of not much use. Since
              2.3.21 this flag can  be  specified  only  by  the  system  boot
              process (PID 0).  It disappeared in Linux 2.5.16.


       CLONE_THREAD (0x10000)
              (Linux  2.4 onwards) If CLONE_THREAD is set, the child is placed
              in the same thread group as the calling process.

              If CLONE_THREAD is not set, then the child is placed in its  own
              (new) thread group, whose ID is the same as the process ID.

              (Thread  groups  are  feature  added in Linux 2.4 to support the
              POSIX threads notion of a set of threads sharing a  single  PID.
              In  Linux  2.4, calls to getpid(2) return the thread group ID of
              the caller.)

stack
-----

       The child_stack argument specifies the location of the stack used by
       the child process. Since the child and calling process may share mem-
       ory,  it is not possible for the child process to execute in the same
       stack as the calling process. The calling process must therefore set
       up memory space for the child stack and pass a pointer to this space to
       clone.  Stacks grow downwards on all processors that run Linux  (except
       the  HP  PA  processors),  so child_stack usually points to the topmost
       address of the memory space set up for the child stack.


extended parameters
-------------------

       Since Linux 2.5.49 the system call has five parameters.   The  two  new
       parameters  are  parent_tidptr  which points to the location (in parent
       and child memory) where the child thread ID will  be  written  in  case
       CLONE_PARENT_SETTID was specified, and child_tidptr which points to the
       location (in child memory) where the child thread ID will be written in
       case CLONE_CHILD_SETTID was specified.

RETURN VALUE
       On success, the PID of the child process is returned  in  the  caller's
       thread of execution.  On failure, a negative code will be returned into
       the callers context, no child process will be created


ERRORS
       EAGAIN Too many processes are already running.

       ENOMEM Cannot  allocate  sufficient memory to allocate a task structure
              for the child, or to copy those parts of  the  caller's  context
              that need to be copied.

       EINVAL Returned   by   clone   when  a  zero  value  is  specified  for
              child_stack.

       EINVAL Both CLONE_FS and CLONE_NEWNS were specified in flags.

       EINVAL CLONE_THREAD was specified, but CLONE_SIGHAND  was  not.  (Since
              Linux 2.5.35.)

       EINVAL Precisely  one of CLONE_DETACHED and CLONE_THREAD was specified.
              (Since Linux 2.6.0-test6.)

       EINVAL CLONE_SIGHAND was specified, but CLONE_VM was not. (Since  Linux
              2.6.0-test6.)

       EPERM  CLONE_NEWNS was specified by a non-root process (process without
              CAP_SYS_ADMIN).

       EPERM  CLONE_PID was specified by a process other than process 0.


BUGS
      As of version 2.1.97 of the kernel, the CLONE_PID flag should not be
      used, since other parts of the kernel and most system software still
      assume that process IDs are unique.

SEE ALSO
       fork, wait, pthread_create


