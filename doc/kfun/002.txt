
----------------------------------------------------------------------------
   2 fork          - create a child process 
----------------------------------------------------------------------------
  mov  eax,002
  int  80h              ;returns 0 to child,  childs PID to parent

       fork  creates a child process that differs from the parent process only
       in its PID and PPID, and in the fact that resource utilizations are set
       to 0.  File locks and pending signals are not inherited.

       Under Linux, fork is implemented using copy-on-write pages, so the only
       penalty incurred by fork is the time and memory required  to  duplicate
       the parent's page tables, and to create a unique task structure for the
       child.

       All registers are passed to the forked process except for eax

RETURN VALUE
       On success, the PID of the child process is returned  in  the  parent's
       thread  of execution, and a 0 is returned in the child's thread of exe-
       cution.  On failure, a negative code will be returned in the parent's
       context, no child process will be created

ERRORS
       EAGAIN fork cannot allocate sufficient memory to copy the parent's page
              tables and allocate a task structure for the child.

       ENOMEM fork failed to allocate the necessary kernel structures  because
              memory is tight.

SEE ALSO
       clone, execve, vfork, wait


