
----------------------------------------------------------------------------
system 149 sysctl                  - read/write system parameters
----------------------------------------------------------------------------
  mov  eax,149
  mov  ebx,args ;ptr to args struc
  int  80h

       The  _sysctl  call  reads and/or writes kernel parameters. For example,
       the hostname, or the maximum number of open files. The argument has the
       form

       struct args
         .name     resd 1 ; ptr to vector describing variable */
         .nlen     resd 1 ; length of this vector */
         .oldval   resd 1 ; 0 or address where to store old value */
         .oldlenp  resd 1 ; ptr to available room for old value,
                            overwritten by actual size of old value */
         .newval   resd 1 ; 0 or address of new value */
         .newlen   resd 1 ; size of new value */
       endstruc

       This  call  does  a  search  in a tree structure, possibly resembling a
       directory tree under /proc/sys, and if  the  requested  item  is  found
       calls some appropriate routine to read or modify the value.

       see /linux/sysctl.h for more information.

EXAMPLE
       #include <linux/unistd.h>
       #include <linux/types.h>
       #include <linux/sysctl.h>

       _syscall1(int, _sysctl, struct __sysctl_args *, args);
       int sysctl(int *name, int nlen, void *oldval, size_t *oldlenp,
                  void *newval, size_t newlen)
       {
               struct __sysctl_args args={name,nlen,oldval,oldlenp,newval,newlen};
               return _sysctl(&args);
       }

       #define SIZE(x) sizeof(x)/sizeof(x[0])
       #define OSNAMESZ 100

       char osname[OSNAMESZ];
       int osnamelth;
       int name[] = { CTL_KERN, KERN_OSTYPE };

       main(){
               osnamelth = sizeof(osname);
               if (sysctl(name, SIZE(name), osname, &osnamelth, 0, 0))
                       perror("sysctl");
               else
                       printf("This machine is running %*s\n", osnamelth, osname);
               return 0;
       }


RETURN VALUE
       Upon successful completion, _sysctl returns 0. Otherwise a
       negative error

ERRORS
       ENOTDIR
              name was not found.

       EPERM  No search permission for one of the  encountered  `directories',
              or no read permission where oldval was nonzero, or no write per-
              mission where newval was nonzero.

       EFAULT The invocation asked for the previous value  by  setting  oldval
              non-NULL, but allowed zero room in oldlenp.

CONFORMING TO
       This  call  is  Linux-specific,  and  should  not  be  used in programs
       intended to be portable.  A sysctl call has been present in Linux since
       version  1.3.57.  It originated in 4.4BSD. Only Linux has the /proc/sys
       mirror, and the object naming schemes differ between Linux and BSD 4.4,
       but the declaration of the sysctl function is the same in both.

BUGS
       The  object names vary between kernel versions.  THIS MAKES THIS SYSTEM
       CALL WORTHLESS FOR APPLICATIONS.  Use the /proc/sys interface  instead.
       Not all available objects are properly documented.
       It  is  not  yet  possible  to  change  operating  system by writing to
       /proc/sys/kernel/ostype.

SEE ALSO
       proc


